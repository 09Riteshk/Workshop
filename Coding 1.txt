Task 1:

1. Write a simple Python class named Student and display its type. Also, display the __dict__ attribute keys and the value of the __module__ attribute of the Student class

Code: 
      class Student:
          pass
      print(type(Student))
      print(Student.__dict__.keys())
      print(Student.__module__)

     Output:
           <class 'type'>
           dict_keys(['__module__', '__dict__', '__weakref__', '__doc__'])
           __main__

2. Write a Python class named Student with two attributes student_id, student_name. Add a new attribute student_class and display the entire attribute and their values of the said class. Now remove the student_name attribute and display the entire attribute with values.

Code: 
    class Student:
        student_id = 'SIN03'
        student_name = 'Ritesh Kolhe '  
    print("Original attributes and their values of the Student class:")
    for attr, value in Student.__dict__.items():
        if not attr.startswith('_'):
            print(f'{attr} -> {value}')
    print("\nAfter adding the student_class, attributes and their values with the said class:")
    Student.student_class  = 'SE'
    for attr, value in Student.__dict__.items():
        if not attr.startswith('_'):
            print(f'{attr} -> {value}')
    print("\nAfter removing the student_name, attributes and their values from the said class:")
    del Student.student_name
    #delattr(Student, 'student_name')
    for attr, value in Student.__dict__.items():
        if not attr.startswith('_'):
            print(f'{attr} -> {value}')
    
     Output:
            Original attributes and their values of the Student class:
            student_id -> SIN03
            student_name -> Ritesh Kolhe 

            After adding the student_class, attributes and their values with the said class:
            student_id -> SIN03
            student_name -> Ritesh Kolhe 
            student_class -> SE
 
            After removing the student_name, attributes and their values from the said class:
            student_id -> SIN03
            student_class -> SE

3. Write a Python class to get all possible unique subsets from a set of distinct integers.

Code:
    class py_solution:
        def sub_sets(self, sset):
            return self.subsetsRecur([], sorted(sset))
    
        def subsetsRecur(self, current, sset):
            if sset:
                return self.subsetsRecur(current, sset[1:]) + self.subsetsRecur(current + [sset[0]], sset[1:])
            return [current]

    print(py_solution().sub_sets([4,5,6])) 

     Output:
            [[], [6], [5], [5, 6], [4], [4, 6], [4, 5], [4, 5, 6]]

4. Write a Python class to convert an integer to a roman numeral.
      
Code: 
    class py_solution:
        def int_to_Roman(self, num):
            val = [
                1000, 900, 500, 400,
                100, 90, 50, 40,
                10, 9, 5, 4,
                1
                ]
            syb = [
                "M", "CM", "D", "CD",
                "C", "XC", "L", "XL",
                "X", "IX", "V", "IV",
                "I"
                ]
            roman_num = ''
            i = 0
            while  num > 0:
                for _ in range(num // val[i]):
                    roman_num += syb[i]
                    num -= val[i]
                i += 1
            return roman_num


    print(py_solution().int_to_Roman(100))
    print(py_solution().int_to_Roman(55))

     Output:
             C
             LV
             
5. Write a Python class to convert a roman numeral to an integer.

Code: 
    class py_solution:
        def roman_to_int(self, s):
            rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
            int_val = 0
            for i in range(len(s)):
                if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                    int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
                else:
                    int_val += rom_val[s[i]]
            return int_val

    print(py_solution().roman_to_int('CMLXXXVI'))
    print(py_solution().roman_to_int('MM'))
    print(py_solution().roman_to_int('CL'))   

     Output:
            986
            2000
            150  

6. Write a Python class to find a pair of elements (indices of the two numbers) from a given array whose sum equals a specific target number.
   Note: There will be one solution for each input and do not use the same element twice.  
   Input: numbers= [10,20,10,40,50,60,70], target=50
   Output: 3, 4

Code:
    class py_solution:
      def twoSum(self, nums, target):
           lookup = {}
           for i, num in enumerate(nums):
               if target - num in lookup:
                   return (lookup[target - num], i )
               lookup[num] = i
    print( py_solution().twoSum((10,20,10,40,50,60,70),100))

     Output: 
            (3, 5)

7. Write a Python class which has two methods get_String and print_String. get_String accept a string from the user and print_String print the string in upper case.

Code:
    class IOString():
        def __init__(self):
            self.str1 = ""

        def get_String(self):
            self.str1 = input()

        def print_String(self):
            print(self.str1.upper())

    str1 = IOString()
    str1.get_String()
    str1.print_String()

     Input: 
           welcome to team raptorS
     Output: 
            WELCOME TO TEAM RAPTORS